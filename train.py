# -*- coding: utf-8 -*-
"""TransferLearningTut_MobileNet_tf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ggg50d22_2ldn62w_rkC5sC9xnzRgpwf
"""

import matplotlib.pyplot as plt
import numpy as np
import os
import tensorflow as tf


#setting up training DS

train_dir = '/Volumes/Blue Drive/iNatDataset/plants_split/train'
validation_dir = '/Volumes/Blue Drive/iNatDataset/plants_split/val'
test_dir = '/Volumes/Blue Drive/iNatDataset/plants_split/test'

BATCH_SIZE=32
IMG_SIZE=(160,160)

train_dataset = tf.keras.utils.image_dataset_from_directory(train_dir,
                                                            shuffle=True,
                                                            batch_size=BATCH_SIZE,
                                                            image_size=IMG_SIZE)

## Setting up val DS

val_dataset = tf.keras.utils.image_dataset_from_directory(validation_dir,
                                                          shuffle=True,
                                                          batch_size=BATCH_SIZE,
                                                          image_size=IMG_SIZE)

## Display the first 9 images and their labels

class_names = train_dataset.class_names
num_classes = len(class_names)

##print(train_dataset.class_names)

plt.figure(figsize=(10,10))
for images, labels in train_dataset.take(1):
  for i in range(9):
    ax = plt.subplot(3,3, i+1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis('off')

## Seperate a test set from the val set

val_batches = tf.data.experimental.cardinality(val_dataset)
## print(val_batches)

test_dataset = val_dataset.take(val_batches // 5)

val_dataset = val_dataset.skip(val_batches // 5)

print('Number of validation batches: %d' % tf.data.experimental.cardinality(val_dataset))
print('Number of test batches: %d' % tf.data.experimental.cardinality(test_dataset))

## Optimize the training process using GPU prefetch

AUTOTUNE = tf.data.AUTOTUNE

train_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)
val_dataset = val_dataset.prefetch(buffer_size=AUTOTUNE)
test_dataset = test_dataset.prefetch(buffer_size=AUTOTUNE)

## Create data augmentation to prevent overfitting on images

data_augmentation = tf.keras.Sequential([
    tf.keras.layers.RandomFlip('horizontal'),
    tf.keras.layers.RandomRotation(0.2)]
)

## Normalizing the pixel values between -1, 1 which is what MobileNet expects
preprocess_input = tf.keras.applications.mobilenet_v2.preprocess_input

## CREATING THE BASE MODEL OF MOBILENET V2

## adding the extra dimension of the color channels to create required shape dimensions
IMG_SHAPE = IMG_SIZE + (3,)
base_model = tf.keras.applications.MobileNetV2(input_shape=IMG_SHAPE,
                                               include_top=False,
                                               weights='imagenet')

## FREEZING THE BASE MODEL
base_model.trainable = False
base_model.summary()

## Using Global Average Pooling to convert from 5x5x1280 to flatten features into a 1280 element vector per image
global_average_layer = tf.keras.layers.GlobalAveragePooling2D()

## Prediction layer converts the 1280 feature elements into 1 prediction per image

prediction_layer = tf.keras.layers.Dense(num_classes,activation='softmax')

## Building Model out of all the parts

inputs = tf.keras.Input(shape=IMG_SHAPE)

## Preprocessing stage:
x = data_augmentation(inputs)
x = preprocess_input(x)

## Feed new data into the pre-trained base model with training turned off
x = base_model(x, training=False)

x = global_average_layer(x)
x = tf.keras.layers.Dropout(0.2)(x)
outputs = prediction_layer(x)

#Assemble model
model = tf.keras.Model(inputs, outputs)

model.summary()

## Compile the model

base_learning_rate = 0.0001
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=base_learning_rate),
              loss=tf.keras.losses.SparseCategoricalCrossentropy(),
              metrics=['accuracy'])

history = model.fit(train_dataset, validation_data=val_dataset, epochs=10)

loss, accuracy = model.evaluate(test_dataset)
print('Test accuracy :', accuracy)